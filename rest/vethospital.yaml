openapi: 3.0.1
info:
  title: Vethospital.io APIs
  description: vethospital.io APIs
  termsOfService: 'https://vethospital.io/terms/'
  contact:
    email: neelesh@vethospital.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.0
servers:
  - url: 'http://localhost:8080'
tags:
  - name: Tennants
    description: Everything about Tennants
paths:
  /api/v1/tennants:
    post:
      tags:
        - Tennants
      summary: Add a new Tennant
      operationId: addTennant
      requestBody:
        description: Pet object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tennant'
        required: true
      responses:
        '201':
          description: added.
          content: {}
        '405':
          description: Invalid input
          content: {}
     
  /api/v1/tennants/{tennantid}:
    get:
      tags:
        - Tennants
      summary: Get tennant by ID
      operationId: getTennant
      parameters:
        - name: tennantid
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tennant'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Tennant not found
          content: {}
      
components:
  schemas:
    Tennant:
      required:
        - tennantid
        - name
        - msg
      type: object
      properties:
        tennantid:
          type: string
          minLength: 5
          maxLength: 40
        name:
          type: string
          minLength: 5
          maxLength: 100
        email:
          type: string
          pattern: '[^@ \t\r\n]+@[^@ \t\r\n]+\.[^@ \t\r\n]+'
        created:
          type: string
          format: date-time
          readOnly: true
        status:
          type: string
          enum: [active, inactive]
        msg:
          type: array
          items:
            type: string
        public:
          type: boolean
  securitySchemes:
    jwt:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
        
    